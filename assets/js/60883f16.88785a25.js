"use strict";(self.webpackChunkdoc_courses=self.webpackChunkdoc_courses||[]).push([[89],{4792:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=n(5893),i=n(1151);const s={title:"Release It!"},o=void 0,r={id:"release-it/index",title:"Release It!",description:"1. Padr\xf5es de Resili\xeancia:",source:"@site/docs/release-it/index.md",sourceDirName:"release-it",slug:"/release-it/",permalink:"/my-docs/docs/release-it/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/release-it/index.md",tags:[],version:"current",frontMatter:{title:"Release It!"},sidebar:"tutorialSidebar",previous:{title:"references",permalink:"/my-docs/docs/debezium-and-cdc/references"}},l={},c=[{value:"1. Padr\xf5es de Resili\xeancia:",id:"1-padr\xf5es-de-resili\xeancia",level:3},{value:"2. Monitoramento Eficaz:",id:"2-monitoramento-eficaz",level:3},{value:"3. Desenvolvimento Orientado por Metas:",id:"3-desenvolvimento-orientado-por-metas",level:3},{value:"4. Estudos de Caso e Experi\xeancias Pr\xe1ticas:",id:"4-estudos-de-caso-e-experi\xeancias-pr\xe1ticas",level:3},{value:"5. Gerenciamento de Incidentes:",id:"5-gerenciamento-de-incidentes",level:3},{value:"6. Garantindo a Disponibilidade:",id:"6-garantindo-a-disponibilidade",level:3},{value:"7. Resili\xeancia em Arquiteturas Distribu\xeddas:",id:"7-resili\xeancia-em-arquiteturas-distribu\xeddas",level:3},{value:"Defining stability (pg 24-25)",id:"defining-stability-pg-24-25",level:4},{value:"Chain of Failure (pg 29)",id:"chain-of-failure-pg-29",level:4},{value:"Transmission Control Protocol (TCP)",id:"transmission-control-protocol-tcp",level:4},{value:"Countering Integration Point Problems (pg 45)",id:"countering-integration-point-problems-pg-45",level:3},{value:"What can you do to make integration points safer?",id:"what-can-you-do-to-make-integration-points-safer",level:4},{value:"Beware this necessary evil.",id:"beware-this-necessary-evil",level:5},{value:"Prepare for the many forms of failure.",id:"prepare-for-the-many-forms-of-failure",level:5},{value:"Know when to open up abstractions.",id:"know-when-to-open-up-abstractions",level:5},{value:"Failures propagate quickly.",id:"failures-propagate-quickly",level:5},{value:"Apply patterns to avert integration point problems.",id:"apply-patterns-to-avert-integration-point-problems",level:5},{value:"Chain Reactions (pg 46)",id:"chain-reactions-pg-46",level:3},{value:"Recognize that one server down jeopardizes the rest.",id:"recognize-that-one-server-down-jeopardizes-the-rest",level:5},{value:"Hunt for resource leaks.",id:"hunt-for-resource-leaks",level:5},{value:"Hunt for obscure timing bugs.",id:"hunt-for-obscure-timing-bugs",level:5},{value:"Use Autoscaling.",id:"use-autoscaling",level:5},{value:"Defend with Bulkheads.",id:"defend-with-bulkheads",level:5},{value:"Cascading Failures (pg 49)",id:"cascading-failures-pg-49",level:3},{value:"Stop cracks from jumping the gap.",id:"stop-cracks-from-jumping-the-gap",level:5},{value:"Scrutinize resource pools.",id:"scrutinize-resource-pools",level:5},{value:"Defend with Timeouts and Circuit Breaker.",id:"defend-with-timeouts-and-circuit-breaker",level:5},{value:"Heap Memory (pg 52)",id:"heap-memory-pg-52",level:3},{value:"Off-Heap Memory, Off-Host Memory",id:"off-heap-memory-off-host-memory",level:5}];function d(e){const a={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h3,{id:"1-padr\xf5es-de-resili\xeancia",children:"1. Padr\xf5es de Resili\xeancia:"}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Circuit Breaker:"})," Implementa a interrup\xe7\xe3o de circuito para evitar falhas em cascata.",(0,t.jsx)(a.br,{}),"\n",(0,t.jsx)(a.strong,{children:"Bulkhead:"})," Isola componentes para evitar que uma falha afete todo o sistema.",(0,t.jsx)(a.br,{}),"\n",(0,t.jsx)(a.strong,{children:"Timeout e Retry:"})," Estrat\xe9gias para lidar com opera\xe7\xf5es lentas ou falhas tempor\xe1rias."]}),"\n",(0,t.jsx)(a.h3,{id:"2-monitoramento-eficaz",children:"2. Monitoramento Eficaz:"}),"\n",(0,t.jsxs)(a.p,{children:["A import\xe2ncia de implementar um sistema de monitoramento robusto para detectar problemas rapidamente.",(0,t.jsx)(a.br,{}),"\n","A necessidade de m\xe9tricas relevantes e alertas proativos para antecipar poss\xedveis falhas."]}),"\n",(0,t.jsx)(a.h3,{id:"3-desenvolvimento-orientado-por-metas",children:"3. Desenvolvimento Orientado por Metas:"}),"\n",(0,t.jsxs)(a.p,{children:["A abordagem de pensar nas metas do neg\xf3cio ao desenvolver software.",(0,t.jsx)(a.br,{}),"\n","Como alinhar o desenvolvimento de software com os objetivos estrat\xe9gicos da organiza\xe7\xe3o."]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Goal-Driven_Software_Development_Process",children:"Wikipedia"})}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"4-estudos-de-caso-e-experi\xeancias-pr\xe1ticas",children:"4. Estudos de Caso e Experi\xeancias Pr\xe1ticas:"}),"\n",(0,t.jsxs)(a.p,{children:["Li\xe7\xf5es aprendidas com falhas not\xe1veis em sistemas de grande escala.",(0,t.jsx)(a.br,{}),"\n","Como as organiza\xe7\xf5es lidaram com incidentes e implementaram melhorias."]}),"\n",(0,t.jsx)(a.h3,{id:"5-gerenciamento-de-incidentes",children:"5. Gerenciamento de Incidentes:"}),"\n",(0,t.jsxs)(a.p,{children:["A import\xe2ncia de uma resposta r\xe1pida e coordenada a problemas.",(0,t.jsx)(a.br,{}),"\n","Forma\xe7\xe3o de equipes de resposta a incidentes e implementa\xe7\xe3o de processos eficientes."]}),"\n",(0,t.jsx)(a.h3,{id:"6-garantindo-a-disponibilidade",children:"6. Garantindo a Disponibilidade:"}),"\n",(0,t.jsxs)(a.p,{children:["Estrat\xe9gias para lidar com tr\xe1fego inesperado e picos de demanda.",(0,t.jsx)(a.br,{}),"\n","Atualiza\xe7\xf5es de software sem interrup\xe7\xf5es e pr\xe1ticas para manter a disponibilidade."]}),"\n",(0,t.jsx)(a.h3,{id:"7-resili\xeancia-em-arquiteturas-distribu\xeddas",children:"7. Resili\xeancia em Arquiteturas Distribu\xeddas:"}),"\n",(0,t.jsxs)(a.p,{children:["Como projetar sistemas que s\xe3o robustos em ambientes distribu\xeddos.",(0,t.jsx)(a.br,{}),"\n","Considera\xe7\xf5es para garantir a comunica\xe7\xe3o eficiente entre componentes distribu\xeddos."]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.p,{children:"Introdu\xe7\xe3o aos Sistemas Antifr\xe1geis:\nNygard introduz a ideia de sistemas antifr\xe1geis, que n\xe3o apenas resistem a falhas, mas se beneficiam delas para melhorar e evoluir. Ele destaca a import\xe2ncia de n\xe3o apenas construir sistemas que funcionem, mas tamb\xe9m aqueles que podem lidar eficientemente com o inevit\xe1vel."}),"\n",(0,t.jsx)(a.p,{children:"Padr\xf5es de Resili\xeancia:\nO autor explora uma variedade de padr\xf5es de resili\xeancia, como Circuit Breaker, Bulkhead, Timeout, e Retry. Cada padr\xe3o \xe9 detalhadamente explicado, oferecendo insights sobre quando e como aplic\xe1-los para proteger os sistemas contra falhas e garantir a continuidade operacional."}),"\n",(0,t.jsx)(a.p,{children:"Monitoramento e Detec\xe7\xe3o de Problemas:\nNygard destaca a import\xe2ncia do monitoramento eficaz e da detec\xe7\xe3o precoce de problemas. Ele fornece estrat\xe9gias para implementar sistemas de monitoramento que oferecem visibilidade em tempo real do desempenho do sistema e que alertam proativamente sobre poss\xedveis falhas."}),"\n",(0,t.jsx)(a.p,{children:"Desenvolvimento Orientado por Metas (Goal-Oriented Development):\nO livro defende a abordagem de desenvolvimento orientado por metas, incentivando os desenvolvedores a pensar nas metas e expectativas do neg\xf3cio ao projetar e implementar sistemas. Isso ajuda a criar sistemas mais alinhados com as necessidades reais da organiza\xe7\xe3o."}),"\n",(0,t.jsx)(a.p,{children:"Estudos de Caso e Experi\xeancias Pr\xe1ticas:\nNygard enriquece o livro com uma variedade de estudos de caso e experi\xeancias pr\xe1ticas da vida real. Ele compartilha hist\xf3rias de falhas not\xe1veis em sistemas de grande escala, destacando li\xe7\xf5es valiosas aprendidas com esses incidentes."}),"\n",(0,t.jsx)(a.p,{children:"Gerenciamento de Incidentes:\nO autor aborda o gerenciamento eficaz de incidentes, discutindo a import\xe2ncia de uma resposta r\xe1pida e coordenada a problemas. Ele fornece orienta\xe7\xf5es sobre como formar equipes de resposta a incidentes e implementar processos eficientes para lidar com crises."}),"\n",(0,t.jsx)(a.p,{children:"Garantindo a Disponibilidade:\nNygard explora estrat\xe9gias para garantir a disponibilidade cont\xednua de sistemas, incluindo t\xe9cnicas para lidar com tr\xe1fego inesperado, atualiza\xe7\xf5es de software sem interrup\xe7\xf5es e o uso eficaz de arquiteturas distribu\xeddas."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h4,{id:"defining-stability-pg-24-25",children:"Defining stability (pg 24-25)"}),"\n",(0,t.jsx)(a.p,{children:"The terms impulse and stress come from mechanical engineering. An impulse is a rapid shock to the system. An impulse to the system is when something whacks it with a hammer.\nIn contrast, stress to the system is a force applied to the system over an extended period."}),"\n",(0,t.jsx)(a.p,{children:"Examples:\nA flash mob pounding the PS6 product detail page, thanks to a rumor that such a thing exists, cause an impulse. Ten thousand new sessions, all arriving within one minute of each other, is very difficult for any service instance to withstand.\nA celebrity tweet about your site is an impulse. Dumping twelve million messages into a queue at midnight on November 21 is an impulse. These thing can facture the system in the blink of an eye."}),"\n",(0,t.jsxs)(a.p,{children:["On the other hand, getting slow response from your credit card processor because it doesn't have enough capacity for all of its customers is a stress to the system. In a mechanical system, a material changes shape when stress is applied.\nThis change in shape is called the ",(0,t.jsx)(a.code,{children:"strain"}),". Stress produces strain. The same thing happens with computer systems. The stress from the credit card processor will cause strain to propagate to other parts of the system, which can produce odd effects.\nIt could manifest as higher RAM usage on the web servers or excess I/O rates on the database server or as some other far distant effect."]}),"\n",(0,t.jsx)(a.p,{children:"So how do you find these kinds of bugs? The only way you can catch them before they bite you in production is to run your own longevity tests. If you can, set aside a developer machine. Have it run JMeter, Marathon, or some other load-testing tool.\nDon't hit the system hard; just keep driving requests all the time. (Also, be sure to have the scripts slack for a few hours a day to simulate the slow period during the middle of the night. That will catch connection pool and firewall timeouts.)"}),"\n",(0,t.jsx)(a.h4,{id:"chain-of-failure-pg-29",children:"Chain of Failure (pg 29)"}),"\n",(0,t.jsx)(a.p,{children:"Underneath  every  system  outage  is  a  chain  of  events  like  this.  One  small\nissue leads to another, which leads to another. Looking at the entire chain\nof failure after the fact, the failure seems inevitable."}),"\n",(0,t.jsx)(a.p,{children:"Fault: A condition that creates an incorrect internal state in your software.\nA fault may be due to a latent bug that gets triggered, or it may be due\nto an unchecked condition at a boundary or external interface."}),"\n",(0,t.jsx)(a.p,{children:"Error: Visibly incorrect behavior. When your trading system suddenly buys\nten billion dollars of Pokemon futures, that is an error."}),"\n",(0,t.jsx)(a.p,{children:"Failure: An unresponsive system. When a system doesn\u2019t respond, we say it\nhas failed. Failure is in the eye of the beholder...a computer may have\nthe power on but not respond to any requests."}),"\n",(0,t.jsx)(a.p,{children:"One way to prepare for every possible failure is to look at every external call,\nevery I/O, every use of resources, and every expected outcome and ask, \u201cWhat\nare all the ways this can go wrong?\u201d Think about the different types of impulse\nand stress that can be applied:\n\u2022 What if it can\u2019t make the initial connection?\n\u2022 What if it takes ten minutes to make the connection?\n\u2022 What if it can make the connection and then gets disconnected?\n\u2022 What if it can make the connection but doesn\u2019t get a response from the\nother end?\n\u2022 What if it takes two minutes to respond to my query?\n\u2022 What if 10,000 requests come in at the same time?\n\u2022 What if the disk is full when the application tries to log the error message\nabout the SQLException that happened because the network was bogged\ndown with a worm?"}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"Every architecture diagram ever drawn has boxes and arrows, similar to the\nones in the following figure. (A new architect will focus on the boxes; an\nexperienced one is more interested in the arrows.)"})}),"\n",(0,t.jsx)(a.h4,{id:"transmission-control-protocol-tcp",children:"Transmission Control Protocol (TCP)"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"\u201cthree-way handshake\u201d to establish a connection"}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"The connection starts when the caller (the client in this scenario, even though\nit is itself a server for other applications) sends a SYN packet to a port on the"}),"\n",(0,t.jsx)(a.p,{children:"remote server. If nobody is listening to that port, the remote server immedi-\nately sends back a TCP \u201creset\u201d packet to indicate that nobody\u2019s home. The"}),"\n",(0,t.jsx)(a.p,{children:"calling application then gets an exception or a bad return value. All this happens very quickly, in less than ten milliseconds if both machines are\nplugged into the same switch."}),"\n",(0,t.jsx)(a.p,{children:"If the remote server is listening on that port, it sends back a SYN-ACK packet to acknowledge the connection. The caller then sends an ACK packet to acknowledge the acknowledgment. The connection is now established, and the two applications can start sending data back and forth."}),"\n",(0,t.jsx)(a.p,{children:"Suppose, though, that the remote application is listening to the port but is\nabsolutely hammered with connection requests, until it can no longer service\nthe incoming connections. The port itself has a \u201clisten queue\u201d that defines\nhow many pending connections (SYN sent, but no SYN/ACK replied) are\nallowed by the network stack. Once that listen queue is full, further connection\nattempts are refused quickly. The listen queue is the worst place to be. While\nthe socket is in that partially formed state, whichever thread called open() is\nblocked inside the OS kernel until the remote application finally gets around"}),"\n",(0,t.jsx)(a.p,{children:"to accepting the connection or until the connection attempt times out. Con-\nnection timeouts vary from one operating system to another, but they\u2019re"}),"\n",(0,t.jsx)(a.p,{children:"usually measured in minutes! The calling application\u2019s thread could be blocked\nwaiting for the remote server to respond for ten minutes!"}),"\n",(0,t.jsx)(a.p,{children:"Network failures can hit you in two ways: fast or slow. Fast network failures\ncause immediate exceptions in the calling code. \u201cConnection refused\u201d is a very\nfast failure; it takes a few milliseconds to come back to the caller. Slow failures,\nsuch as a dropped ACK, let threads block for minutes before throwing exceptions.\nThe blocked thread can\u2019t process other transactions, so overall capacity is\nreduced. If all threads end up getting blocked, then for all practical purposes,\nthe server is down. Clearly, a slow response is a lot worse than no response."}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"A socket is an endpoint of a bidirectional communication between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to. An endpoint is a combination of an IP address and a port number. Every TCP connection can be uniquely identified by its two endpoints. That way you can have multiple connections between your host and the server."})}),"\n",(0,t.jsx)(a.p,{children:"Ways that such an integration point can harm the caller:\n\u2022 The provider may accept the TCP connection but never respond to the\nHTTP request.\n\u2022 The provider may accept the connection but not read the request. If the\nrequest body is large, it might fill up the provider\u2019s TCP window. That\ncauses the caller\u2019s TCP buffers to fill, which will cause the socket write\nto block. In this case, even sending the request will never finish.\n\u2022 The provider may send back a response status the caller doesn\u2019t know\nhow to handle. Like \u201c418 I\u2019m a teapot.\u201d Or more likely, \u201c451 Resource\ncensored.\u201d\n\u2022 The provider may send back a response with a content type the caller\ndoesn\u2019t expect or know how to handle, such as a generic web server 404\npage in HTML instead of a JSON response. (In an especially pernicious\nexample, your ISP may inject an HTML page when your DNS lookup fails.)\n\u2022 The provider may claim to be sending JSON but actually sending plain\ntext. Or kernel binaries. Or Weird Al Yankovic MP3s."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"countering-integration-point-problems-pg-45",children:"Countering Integration Point Problems (pg 45)"}),"\n",(0,t.jsx)(a.h4,{id:"what-can-you-do-to-make-integration-points-safer",children:"What can you do to make integration points safer?"}),"\n",(0,t.jsx)(a.p,{children:"The most effective stability patterns to combat integration point failures are Circuit Breaker and Decoupling Middleware."}),"\n",(0,t.jsx)(a.p,{children:"Testing helps, too. Cynical software should handle violations of form and function, such as badly formed headers or abruptly closed connections. To make sure your software is cynical enough, you should make a test harness \u2014a simulator that provides controllable behavior\u2014for each integration test."}),"\n",(0,t.jsx)(a.h5,{id:"beware-this-necessary-evil",children:"Beware this necessary evil."}),"\n",(0,t.jsx)(a.p,{children:"Every integration point will eventually fail in some way, and you need to\nbe prepared for that failure."}),"\n",(0,t.jsx)(a.h5,{id:"prepare-for-the-many-forms-of-failure",children:"Prepare for the many forms of failure."}),"\n",(0,t.jsx)(a.p,{children:"Integration point failures take several forms, ranging from various network\nerrors to semantic errors. You will not get nice error responses delivered\nthrough the defined protocol; instead, you\u2019ll see some kind of protocol\nviolation, slow response, or outright hang."}),"\n",(0,t.jsx)(a.h5,{id:"know-when-to-open-up-abstractions",children:"Know when to open up abstractions."}),"\n",(0,t.jsx)(a.p,{children:"Debugging integration point failures usually requires peeling back a layer\nof abstraction. Failures are often difficult to debug at the application layer\nbecause most of them violate the high-level protocols. Packet sniffers and\nother network diagnostics can help."}),"\n",(0,t.jsx)(a.h5,{id:"failures-propagate-quickly",children:"Failures propagate quickly."}),"\n",(0,t.jsx)(a.p,{children:"Failure in a remote system quickly becomes your problem, usually as a\ncascading failure when your code isn\u2019t defensive enough."}),"\n",(0,t.jsx)(a.h5,{id:"apply-patterns-to-avert-integration-point-problems",children:"Apply patterns to avert integration point problems."}),"\n",(0,t.jsx)(a.p,{children:"Defensive programming via Circuit Breaker, Timeouts (see Timeouts, on\npage 91), Decoupling Middleware, and Handshaking (see Handshaking,\non page 111) will all help you avoid the dangers of integration points."}),"\n",(0,t.jsx)(a.p,{children:"The dominant architectural style today is the horizontally scaled farm of\ncommodity hardware. Horizontal scaling means we add capacity by adding\nmore servers. We sometimes call these \u201cfarms.\u201d The alternative, vertical scaling,\nmeans building bigger and bigger servers\u2014adding core, memory, and storage\nto hosts. Vertical scaling has its place, but most of our interactive workload\ngoes to horizontally scaled farms."}),"\n",(0,t.jsx)(a.p,{children:"If your system scales horizontally, then you will have load-balanced farms or\nclusters where each server runs the same applications. The multiplicity of\nmachines provides you with fault tolerance through redundancy. A single\nmachine or process can completely bonk while the remainder continues\nserving transactions."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"chain-reactions-pg-46",children:"Chain Reactions (pg 46)"}),"\n",(0,t.jsx)(a.h5,{id:"recognize-that-one-server-down-jeopardizes-the-rest",children:"Recognize that one server down jeopardizes the rest."}),"\n",(0,t.jsx)(a.p,{children:"A chain reaction happens because the death of one server makes the\nothers pick up the slack. The increased load makes them more likely to\nfail. A chain reaction will quickly bring an entire layer down. Other layers"}),"\n",(0,t.jsx)(a.p,{children:"that depend on it must protect themselves, or they will go down in a cas-\ncading failure."}),"\n",(0,t.jsx)(a.h5,{id:"hunt-for-resource-leaks",children:"Hunt for resource leaks."}),"\n",(0,t.jsx)(a.p,{children:"Most of the time, a chain reaction happens when your application has a\nmemory leak. As one server runs out of memory and goes down, the other\nservers pick up the dead one\u2019s burden. The increased traffic means they\nleak memory faster."}),"\n",(0,t.jsx)(a.h5,{id:"hunt-for-obscure-timing-bugs",children:"Hunt for obscure timing bugs."}),"\n",(0,t.jsx)(a.p,{children:"Obscure race conditions can also be triggered by traffic. Again, if one\nserver goes down to a deadlock, the increased load on the others makes\nthem more likely to hit the deadlock too."}),"\n",(0,t.jsx)(a.h5,{id:"use-autoscaling",children:"Use Autoscaling."}),"\n",(0,t.jsx)(a.p,{children:"In the cloud, you should create health checks for every autoscaling group.\nThe scaler will shut down instances that fail their health checks and start\nnew ones. As long as the scaler can react faster than the chain reaction\npropagates, your service will be available."}),"\n",(0,t.jsx)(a.h5,{id:"defend-with-bulkheads",children:"Defend with Bulkheads."}),"\n",(0,t.jsx)(a.p,{children:"Partitioning servers with Bulkheads can prevent chain\nreactions from taking out the entire service\u2014though they won\u2019t help the\ncallers of whichever partition does go down. Use Circuit Breaker on the\ncalling side for that."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"cascading-failures-pg-49",children:"Cascading Failures (pg 49)"}),"\n",(0,t.jsx)(a.p,{children:"Just as integration points are the number-one source of cracks, cascading\nfailures are the number-one crack accelerator. Preventing cascading failures\nis the very key to resilience. The most effective patterns to combat cascading failures are Circuit Breaker and Timeouts."}),"\n",(0,t.jsx)(a.h5,{id:"stop-cracks-from-jumping-the-gap",children:"Stop cracks from jumping the gap."}),"\n",(0,t.jsx)(a.p,{children:"A cascading failure occurs when cracks jump from one system or layer\nto another, usually because of insufficiently paranoid integration points.\nA cascading failure can also happen after a chain reaction in a lower layer.\nYour system surely calls out to other enterprise systems; make sure you\ncan stay up when they go down."}),"\n",(0,t.jsx)(a.h5,{id:"scrutinize-resource-pools",children:"Scrutinize resource pools."}),"\n",(0,t.jsx)(a.p,{children:"A cascading failure often results from a resource pool, such as a connec-\ntion pool, that gets exhausted when none of its calls return. The threads"}),"\n",(0,t.jsx)(a.p,{children:"that get the connections block forever; all other threads get blocked\nwaiting for connections. Safe resource pools always limit the time a thread\ncan wait to check out a resource."}),"\n",(0,t.jsx)(a.h5,{id:"defend-with-timeouts-and-circuit-breaker",children:"Defend with Timeouts and Circuit Breaker."}),"\n",(0,t.jsx)(a.p,{children:"A cascading failure happens after something else has already gone wrong.\nCircuit Breaker protects your system by avoiding calls out to the troubled\nintegration point. Using Timeouts ensures that you can come back from\na call out to the troubled point."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"heap-memory-pg-52",children:"Heap Memory (pg 52)"}),"\n",(0,t.jsx)(a.p,{children:"One such hard limit is memory available, particularly in interpreted or managed code languages. Excess traffic can stress the memory system in several ways. Assume you use memory-based sessions, the session stays resident in memory for a certain length of time after the last request from that user."}),"\n",(0,t.jsx)(a.p,{children:"During that dead time, the session still occupies valuable memory. Every object you put into the session sits there in memory, tying up precious bytes that could be serving some other user."}),"\n",(0,t.jsx)(a.h5,{id:"off-heap-memory-off-host-memory",children:"Off-Heap Memory, Off-Host Memory"}),"\n",(0,t.jsx)(a.p,{children:"Another effective way to deal with per-user memory is to farm it out to a dif-\nferent process. Instead of keeping it inside the heap\u2014that is, inside the address\nspace of your server\u2019s process\u2014move it out to some other process. Memcached\nis a great tool for this.3 It\u2019s essentially an in-memory key-value store that you\ncan put on a different machine or spread across several machines."}),"\n",(0,t.jsx)(a.p,{children:"Redis is another popular tool for moving memory out of your process.4 It\u2019s a\nfast \u201cdata structure server\u201d that lives in a space between cache and database.\nMany systems use Redis to hold session data instead of keeping it in memory\nor in a relational database."}),"\n",(0,t.jsx)(a.p,{children:"Any  of  these  approaches  exercise  a  trade-off  between  total  addressable\nmemory  size  and  latency  to  access  it.  This  notion  of  memory  hierarchy  is\nranked  by  size  and  distance.  Registers  are  fastest  and  closest  to  the  CPU,\nfollowed by cache, local memory, disk, tape, and so on. On one hand, networks\nhave gotten fast enough that \u201csomeone else\u2019s memory\u201d can be faster to access\nthan local disk. Your application is better off making a remote call to get a\nvalue than reading it from storage. On the other hand, local memory is still\nfaster than remote memory. There\u2019s no one-size-fits-all answer."})]})}function h(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);